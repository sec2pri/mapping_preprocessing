name: Check and test NCBI updates

on:
  workflow_dispatch:
  pull_request: # tests whether it is working on PR
     paths:
     - '.`/workflows/ncbi.yml'
  schedule:
    - cron: "0 0 1,15 * *"  # Run the workflow on the 1st and 15th day of each month
permissions:
  contents: write
  pages: write
  id-token: write
  issues: write


jobs:
  check_new_data:
    runs-on: ubuntu-latest
    name: Check the latest data date
    outputs:
      DATE_NEW: ${{ steps.check_download.outputs.DATE_NEW }}
      DATE_OLD: ${{ steps.check_download.outputs.DATE_OLD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # step 1: check the release date for the latest NCBI files
      - name: Check for new ncbi files
        id: check_download
        run: |
          ##Extract the date from the ncbi config file 
          date_old=$(grep -E '^date=' datasources/ncbi/config | cut -d'=' -f2)
          echo 'Accessing the ncbi data'
          last_modified=$(curl -sI https://ftp.ncbi.nih.gov/gene/DATA/gene_history.gz | grep -i Last-Modified)
          ##Extract the date from the latest changes (up to the day)
          date_new=$(echo $last_modified | cut -d':' -f2- | xargs -I {} date -d "{}" +%Y-%m-%d)
          #Store dates to output
          echo "DATE_OLD=$date_old" >> $GITHUB_OUTPUT
          echo "DATE_NEW=$date_new" >> $GITHUB_OUTPUT
          echo "Date of latest release: $date_new", "Date of release of the current version: $date_old"

  
  test_data_processing:
    name: Test data
    needs: check_new_data
    env:
      DATE_OLD: ${{ needs.check_new_data.outputs.DATE_OLD }}
      DATE_NEW: ${{ needs.check_new_data.outputs.DATE_NEW }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # step 2: download the recent data 
      - name: Download the recent data
        run: |
          ##Store outputs from previous job in environment variables
          echo "$DATE_NEW=$DATE_NEW" >> $GITHUB_ENV
          ##Create temp. folder to store the data in
          mkdir -p datasources/ncbi/data
          ##Download ncbi file
          wget https://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz
          wget https://ftp.ncbi.nih.gov/gene/DATA/gene_history.gz
          mv gene_info.gz gene_history.gz datasources/ncbi/data
          ##Check file size if available
          ls -trlh datasources/ncbi/data

      # step 3: run the Rscripts for ncbi preprocessing 
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.1' # Specify the R version
          include-recommended: true
      - name: Install R dependencies
        run: |
          Rscript -e "install.packages(c('downloader', 'dplyr',))" 

      - name: Test ncbi data processing
        id: ncbi_process
        run: |
          sourceVersion=$DATE_NEW
          gene_history="datasources/ncbi/data/gene_history.gz" 
          gene_info="datasources/ncbi/data/gene_info.gz" 

          outputDir="datasources/ncbi/data/"
          # Run rscripts program and capture its exit code
          Rscript r/src/ncbi.R $sourceVersion $gene_history $gene_info
          # Check the exit status of the R script
          if [ $? -eq 0 ]; then
              # script succeeded
              echo "Successful preprocessing of ncbi data."
              echo "FAILED=false" >> $GITHUB_ENV
          else
              # script failed
              echo "Failed preprocessing of ncbi data."
              echo "FAILED=true" >> $GITHUB_ENV
          fi
